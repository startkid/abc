import random

g = 0  

def print_board(board):
    for i in range(8):
        for j in range(8):
            if board[i] == j:
                print("Q", end=" ")
            else:
                print("_", end=" ")
        print()
    print()

def heuristic(board):
    h = 0
    for i in range(8):
        for j in range(i + 1, 8):
          
            if board[i] == board[j] or abs(board[i] - board[j]) == j - i:
                h += 1
    return h

def solve_eight_queens(start):
    global g
    g += 1
    min_heuristic = heuristic(start)

    if g > 1:
        print("Move", g - 1)
        print_board(start)

    if min_heuristic == 0:
        print("âœ… Solved in {} moves".format(g - 1))
        print_board(start)
        return True

    best_board = None
    best_heuristic = float('inf')

    for row in range(8):
        for col in range(8):
            if start[row] != col:
                new_board = start[:]
                new_board[row] = col
                h = heuristic(new_board)
                if h < best_heuristic:
                    best_heuristic = h
                    best_board = new_board

    if best_board and best_heuristic < min_heuristic:
        return solve_eight_queens(best_board)
    else:
        print("Local Minima Reached. Solution not found.")
        print_board(start)
        return False

def main():
    global g
    g = 0
    start = [random.randint(0, 7) for _ in range(8)]
    print("ðŸ”¹ Starting Board:")
    print_board(start)
    if not solve_eight_queens(start):
        print("Final: Solution not found.")

if __name__ == '__main__':
    main()
